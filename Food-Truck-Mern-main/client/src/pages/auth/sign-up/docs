import React, { useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { makeRequest } from "../../../services/apiServices";
import toast from "react-hot-toast";
import { Helmet } from "react-helmet";
import AOS from "aos";
import "aos/dist/aos.css";
import useForms from "../../../hooks/useForms";

function ProductSignUp() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting }
  } = useForm();
  const { formData, handleChange, resetForm } = useForms({
    shopName: "",
    phone: "",
    address: "",
    description: "",
    starttime: "",
    price: ""
  });
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const { mutate } = useMutation({
    onMutate: () => toast.loading("Loading..."),
    mutationFn: (data) => makeRequest("/user", "POST", data),
    onSuccess: () => {
      queryClient.invalidateQueries(["posts"]);
      toast.dismiss();
      toast.success("Registered successfully");
      navigate("/sign-in");
    },
    onError: () => {
      toast.dismiss();
      toast.error("Error during registration");
    }
  });

  const onSubmit = () => {
    mutate(formData);
  };

  useEffect(() => {
    AOS.init();
  }, []);

  const inputClass = (fieldError) =>
    `w-full p-2 border rounded-md ${
      fieldError ? "border-red-500" : "border-gray-300"
    }`;

  return (
    <>
      <Helmet>
        <title>ProductSignUp</title>
      </Helmet>
      <div className=" p-5 flex justify-center items-center  bg-gray-100">
        <div
          className="w-full max-w-md bg-white shadow-lg p-8 rounded-lg"
          data-aos="fade-up"
        >
          <h1 className="text-center text-3xl font-semibold text-green-600 mb-6">
          Product SignUp
          </h1>
          <form onSubmit={handleSubmit(onSubmit)}>
            {/* Shop Name Field */}
            <div className="mb-4">
              <label
                htmlFor="shopName"
                className="block text-sm font-medium text-gray-700"
              >
                Shop Name
              </label>
              <input
                id="shopName"
                type="text"
                name="shopName"
                {...register("shopName", {
                  required: "Shop Name is required",
                  validate: (value) =>
                    value[0].toUpperCase() === value[0]
                      ? true
                      : "First letter should be capital"
                })}
                className={inputClass(errors.shopName)}
                onChange={handleChange}
              />
              {errors.shopName && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.shopName.message}
                </p>
              )}
            </div>
            {/* Phone Field */}
            <div className="mb-4">
              <label
                htmlFor="phone"
                className="block text-sm font-medium text-gray-700"
              >
                Phone
              </label>
              <input
                id="phone"
                type="text"
                name="phone"
                {...register("phone", {
                  required: "Phone number is required",
                  pattern: {
                    value: /^[0-9]{10}$/,
                    message: "Phone number must be exactly 10 digits"
                  }
                })}
                className={inputClass(errors.phone)}
                onChange={handleChange}
              />
              {errors.phone && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.phone.message}
                </p>
              )}
            </div>
            {/* Address Field */}
            <div className="mb-4">
              <label
                htmlFor="address"
                className="block text-sm font-medium text-gray-700"
              >
                Address
              </label>
              <textarea
                id="address"
                name="address"
                {...register("address", {
                  required: "Address is required"
                })}
                className={inputClass(errors.address)}
                onChange={handleChange}
              />
              {errors.address && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.address.message}
                </p>
              )}
            </div>
            {/* Description Field */}
            <div className="mb-4">
              <label
                htmlFor="description"
                className="block text-sm font-medium text-gray-700"
              >
                Description
              </label>
              <textarea
                id="description"
                name="description"
                {...register("description", {
                  required: "Description is required"
                })}
                className={inputClass(errors.description)}
                onChange={handleChange}
              />
              {errors.description && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.description.message}
                </p>
              )}
            </div>
            {/* StartTime Field */}
            <div className="mb-4">
              <label
                htmlFor="starttime"
                className="block text-sm font-medium text-gray-700"
              >
                Start Time
              </label>
              <input
                id="starttime"
                type="time"
                name="starttime"
                {...register("starttime", {
                  required: "Start time is required"
                })}
                className={inputClass(errors.starttime)}
                onChange={handleChange}
              />
              {errors.starttime && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.starttime.message}
                </p>
              )}
            </div>
            {/* Price Field */}
            <div className="mb-6">
              <label
                htmlFor="price"
                className="block text-sm font-medium text-gray-700"
              >
                Price
              </label>
              <input
                id="price"
                type="text"
                name="price"
                {...register("price", {
                  required: "Price is required"
                })}
                className={inputClass(errors.price)}
                onChange={handleChange}
              />
              {errors.price && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.price.message}
                </p>
              )}
            </div>
            {/* Submit Button */}
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-600 disabled:bg-gray-400"
            >
              {isSubmitting ? "Loading..." : "Submit"}
            </button>
            <div className="text-center mt-4">
              <Link
                to="/sign-in"
                className="text-blue-500 text-sm hover:underline"
              >
                Already have an account? Login
              </Link>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}

export default ProductSignUp;



function SignUp() {
    const {
      register,
      handleSubmit,
      formState: { errors, isSubmitting }
    } = useForm();
    const { formData, handleChange, resetForm } = useForms({
      shopName: "",
      phone: "",
      address: "",
      description: "",
      starttime: "",
      price: ""
    });
    const navigate = useNavigate();
    const queryClient = useQueryClient();
  
    const { mutate } = useMutation({
      onMutate: () => toast.loading("Loading..."),
      mutationFn: (data) => makeRequest("/user", "POST", data),
      onSuccess: () => {
        queryClient.invalidateQueries(["posts"]);
        toast.dismiss();
        toast.success("Registered successfully");
        navigate("/sign-in");
      },
      onError: () => {
        toast.dismiss();
        toast.error("Error during registration");
      }
    });
  
    const onSubmit = () => {
      mutate(formData);
    };
  
    useEffect(() => {
      AOS.init();
    }, []);
  
    const inputClass = (fieldError) =>
      `w-full p-2 border rounded-md ${
        fieldError ? "border-red-500" : "border-gray-300"
      }`;
  
    return (
      <>
        <Helmet>
          <title>Sign-Up</title>
        </Helmet>
        <div className="flex justify-center items-center min-h-screen bg-gray-100">
          <div
            className="w-full max-w-4xl bg-white shadow-lg p-8 rounded-lg"
            data-aos="fade-up"
          >
            <h1 className="text-center text-3xl font-semibold text-green-600 mb-6">
              Product SignUp
            </h1>
            <form onSubmit={handleSubmit(onSubmit)} className="grid gap-6">
              {/* Grid Layout */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Shop Name Field */}
                <div>
                  <label
                    htmlFor="shopName"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Shop Name
                  </label>
                  <input
                    id="shopName"
                    type="text"
                    name="shopName"
                    {...register("shopName", {
                      required: "Shop Name is required",
                      validate: (value) =>
                        value[0].toUpperCase() === value[0]
                          ? true
                          : "First letter should be capital"
                    })}
                    className={inputClass(errors.shopName)}
                    onChange={handleChange}
                  />
                  {errors.shopName && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.shopName.message}
                    </p>
                  )}
                </div>
                {/* Phone Field */}
                <div>
                  <label
                    htmlFor="phone"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Phone
                  </label>
                  <input
                    id="phone"
                    type="text"
                    name="phone"
                    {...register("phone", {
                      required: "Phone number is required",
                      pattern: {
                        value: /^[0-9]{10}$/,
                        message: "Phone number must be exactly 10 digits"
                      }
                    })}
                    className={inputClass(errors.phone)}
                    onChange={handleChange}
                  />
                  {errors.phone && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.phone.message}
                    </p>
                  )}
                </div>
                {/* Price Field */}
                <div>
                  <label
                    htmlFor="price"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Price
                  </label>
                  <input
                    id="price"
                    type="text"
                    name="price"
                    {...register("price", {
                      required: "Price is required"
                    })}
                    className={inputClass(errors.price)}
                    onChange={handleChange}
                  />
                  {errors.price && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.price.message}
                    </p>
                  )}
                </div>
              </div>
  
              {/* Second Row of Inputs */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Address Field */}
                <div>
                  <label
                    htmlFor="address"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Address
                  </label>
                  <textarea
                    id="address"
                    name="address"
                    {...register("address", {
                      required: "Address is required"
                    })}
                    className={inputClass(errors.address)}
                    onChange={handleChange}
                  />
                  {errors.address && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.address.message}
                    </p>
                  )}
                </div>
                {/* Description Field */}
                <div>
                  <label
                    htmlFor="description"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Description
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    {...register("description", {
                      required: "Description is required"
                    })}
                    className={inputClass(errors.description)}
                    onChange={handleChange}
                  />
                  {errors.description && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.description.message}
                    </p>
                  )}
                </div>
                {/* StartTime Field */}
                <div>
                  <label
                    htmlFor="starttime"
                    className="block text-sm font-medium text-gray-700"
                  >
                    Start Time
                  </label>
                  <input
                    id="starttime"
                    type="time"
                    name="starttime"
                    {...register("starttime", {
                      required: "Start time is required"
                    })}
                    className={inputClass(errors.starttime)}
                    onChange={handleChange}
                  />
                  {errors.starttime && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.starttime.message}
                    </p>
                  )}
                </div>
              </div>
  
              {/* Submit Button */}
              <div>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="w-full bg-green-500 text-white p-2 rounded-md hover:bg-green-600 disabled:bg-gray-400"
                >
                  {isSubmitting ? "Loading..." : "Submit"}
                </button>
              </div>
  
              {/* Login Link */}
              <div className="text-center mt-4">
                <Link
                  to="/sign-in"
                  className="text-blue-500 text-sm hover:underline"
                >
                  Already have an account? Login
                </Link>
              </div>
            </form>
          </div>
        </div>
      </>
    );
  }
  
  export default SignUp;



    // Object.entries(formData).forEach(([key, value]) => {
    //   if (key === "address") {
    //     Object.entries(value).forEach(([nestKey, nestValue]) => {
    //       form.append(`address.${nestKey}`, nestValue);
    //     });
    //   } else {
    //     form.append(key, value);
    //   }
    // });